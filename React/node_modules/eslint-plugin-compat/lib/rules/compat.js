"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Lint = _interopRequireWildcard(require("../Lint"));

var _Versioning = _interopRequireWildcard(require("../Versioning"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function getName(node) {
  switch (node.type) {
    case 'NewExpression':
      {
        return node.callee.name;
      }

    case 'MemberExpression':
      {
        return node.object.name;
      }

    case 'CallExpression':
      {
        return node.callee.name;
      }

    default:
      throw new Error('not found');
  }
}

var _default = {
  meta: {
    docs: {
      description: 'Ensure cross-browser API compatibility',
      category: 'Compatibility',
      url: 'https://github.com/amilajack/eslint-plugin-compat/blob/master/docs/rules/compat.md',
      recommended: true
    },
    fixable: 'code',
    schema: []
  },

  create(context) {
    // Determine lowest targets from browserslist config, which reads user's
    // package.json config section. Use config from eslintrc for testing purposes
    const browserslistConfig = context.settings.browsers || context.settings.targets || context.options[0];
    const browserslistTargets = (0, _Versioning.Versioning)((0, _Versioning.default)(context.getFilename(), browserslistConfig));
    const errors = [];

    function lint(node) {
      const {
        isValid,
        rule,
        unsupportedTargets
      } = (0, _Lint.default)(node, browserslistTargets, new Set(context.settings.polyfills || []));

      if (!isValid) {
        errors.push({
          node,
          message: [(0, _Lint.generateErrorName)(rule), 'is not supported in', unsupportedTargets.join(', ')].join(' ')
        });
      }
    }

    const identifiers = new Set();
    return {
      CallExpression: lint,
      MemberExpression: lint,
      NewExpression: lint,

      // Keep track of all the defined variables. Do not report errors for nodes that are not defined
      Identifier(node) {
        if (node.parent) {
          const {
            type
          } = node.parent;

          if ( // ex. const { Set } = require('immutable');
          type === 'Property' || // ex. function Set() {}
          type === 'FunctionDeclaration' || // ex. const Set = () => {}
          type === 'VariableDeclarator' || // ex. class Set {}
          type === 'ClassDeclaration' || // ex. import Set from 'set';
          type === 'ImportDefaultSpecifier' || // ex. import {Set} from 'set';
          type === 'ImportSpecifier' || // ex. import {Set} from 'set';
          type === 'ImportDeclaration') {
            identifiers.add(node.name);
          }
        }
      },

      'Program:exit': () => {
        // Get a map of all the variables defined in the root scope (not the global scope)
        // const variablesMap = context.getScope().childScopes.map(e => e.set)[0];
        errors.filter(error => !identifiers.has(getName(error.node))).forEach(node => context.report(node));
      }
    };
  }

};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy9jb21wYXQuanMiXSwibmFtZXMiOlsiZ2V0TmFtZSIsIm5vZGUiLCJ0eXBlIiwiY2FsbGVlIiwibmFtZSIsIm9iamVjdCIsIkVycm9yIiwibWV0YSIsImRvY3MiLCJkZXNjcmlwdGlvbiIsImNhdGVnb3J5IiwidXJsIiwicmVjb21tZW5kZWQiLCJmaXhhYmxlIiwic2NoZW1hIiwiY3JlYXRlIiwiY29udGV4dCIsImJyb3dzZXJzbGlzdENvbmZpZyIsInNldHRpbmdzIiwiYnJvd3NlcnMiLCJ0YXJnZXRzIiwib3B0aW9ucyIsImJyb3dzZXJzbGlzdFRhcmdldHMiLCJnZXRGaWxlbmFtZSIsImVycm9ycyIsImxpbnQiLCJpc1ZhbGlkIiwicnVsZSIsInVuc3VwcG9ydGVkVGFyZ2V0cyIsIlNldCIsInBvbHlmaWxscyIsInB1c2giLCJtZXNzYWdlIiwiam9pbiIsImlkZW50aWZpZXJzIiwiQ2FsbEV4cHJlc3Npb24iLCJNZW1iZXJFeHByZXNzaW9uIiwiTmV3RXhwcmVzc2lvbiIsIklkZW50aWZpZXIiLCJwYXJlbnQiLCJhZGQiLCJmaWx0ZXIiLCJlcnJvciIsImhhcyIsImZvckVhY2giLCJyZXBvcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7QUFDQTs7OztBQWlCQSxTQUFTQSxPQUFULENBQWlCQyxJQUFqQixFQUF1QjtBQUNyQixVQUFRQSxJQUFJLENBQUNDLElBQWI7QUFDRSxTQUFLLGVBQUw7QUFBc0I7QUFDcEIsZUFBT0QsSUFBSSxDQUFDRSxNQUFMLENBQVlDLElBQW5CO0FBQ0Q7O0FBQ0QsU0FBSyxrQkFBTDtBQUF5QjtBQUN2QixlQUFPSCxJQUFJLENBQUNJLE1BQUwsQ0FBWUQsSUFBbkI7QUFDRDs7QUFDRCxTQUFLLGdCQUFMO0FBQXVCO0FBQ3JCLGVBQU9ILElBQUksQ0FBQ0UsTUFBTCxDQUFZQyxJQUFuQjtBQUNEOztBQUNEO0FBQ0UsWUFBTSxJQUFJRSxLQUFKLENBQVUsV0FBVixDQUFOO0FBWEo7QUFhRDs7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aW50LCB7IGdlbmVyYXRlRXJyb3JOYW1lIH0gZnJvbSAnLi4vTGludCc7XG5pbXBvcnQgRGV0ZXJtaW5lVGFyZ2V0c0Zyb21Db25maWcsIHsgVmVyc2lvbmluZyB9IGZyb20gJy4uL1ZlcnNpb25pbmcnO1xuaW1wb3J0IHR5cGUgeyBFU0xpbnROb2RlIH0gZnJvbSAnLi4vTGludFR5cGVzJztcblxudHlwZSBFU0xpbnQgPSB7XG4gIFthc3ROb2RlVHlwZU5hbWU6IHN0cmluZ106IChub2RlOiBFU0xpbnROb2RlKSA9PiB2b2lkXG59O1xuXG50eXBlIENvbnRleHQgPSB7XG4gIG5vZGU6IEVTTGludE5vZGUsXG4gIHNldHRpbmdzOiB7XG4gICAgYnJvd3NlcnM6IEFycmF5PHN0cmluZz4sXG4gICAgcG9seWZpbGxzOiBBcnJheTxzdHJpbmc+XG4gIH0sXG4gIGdldEZpbGVuYW1lOiAoKSA9PiBzdHJpbmcsXG4gIHJlcG9ydDogKCkgPT4gdm9pZFxufTtcblxuZnVuY3Rpb24gZ2V0TmFtZShub2RlKSB7XG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgY2FzZSAnTmV3RXhwcmVzc2lvbic6IHtcbiAgICAgIHJldHVybiBub2RlLmNhbGxlZS5uYW1lO1xuICAgIH1cbiAgICBjYXNlICdNZW1iZXJFeHByZXNzaW9uJzoge1xuICAgICAgcmV0dXJuIG5vZGUub2JqZWN0Lm5hbWU7XG4gICAgfVxuICAgIGNhc2UgJ0NhbGxFeHByZXNzaW9uJzoge1xuICAgICAgcmV0dXJuIG5vZGUuY2FsbGVlLm5hbWU7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBmb3VuZCcpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIEJyb3dzZXJMaXN0Q29uZmlnID1cbiAgfCBBcnJheTxzdHJpbmc+XG4gIHwge1xuICAgICAgcHJvZHVjdGlvbj86IEFycmF5PHN0cmluZz4sXG4gICAgICBkZXZlbG9wbWVudD86IEFycmF5PHN0cmluZz5cbiAgICB9XG4gIHwgbnVsbDtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBtZXRhOiB7XG4gICAgZG9jczoge1xuICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgY3Jvc3MtYnJvd3NlciBBUEkgY29tcGF0aWJpbGl0eScsXG4gICAgICBjYXRlZ29yeTogJ0NvbXBhdGliaWxpdHknLFxuICAgICAgdXJsOlxuICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL2FtaWxhamFjay9lc2xpbnQtcGx1Z2luLWNvbXBhdC9ibG9iL21hc3Rlci9kb2NzL3J1bGVzL2NvbXBhdC5tZCcsXG4gICAgICByZWNvbW1lbmRlZDogdHJ1ZVxuICAgIH0sXG4gICAgZml4YWJsZTogJ2NvZGUnLFxuICAgIHNjaGVtYTogW11cbiAgfSxcbiAgY3JlYXRlKGNvbnRleHQ6IENvbnRleHQpOiBFU0xpbnQge1xuICAgIC8vIERldGVybWluZSBsb3dlc3QgdGFyZ2V0cyBmcm9tIGJyb3dzZXJzbGlzdCBjb25maWcsIHdoaWNoIHJlYWRzIHVzZXInc1xuICAgIC8vIHBhY2thZ2UuanNvbiBjb25maWcgc2VjdGlvbi4gVXNlIGNvbmZpZyBmcm9tIGVzbGludHJjIGZvciB0ZXN0aW5nIHB1cnBvc2VzXG4gICAgY29uc3QgYnJvd3NlcnNsaXN0Q29uZmlnOiBCcm93c2VyTGlzdENvbmZpZyA9XG4gICAgICBjb250ZXh0LnNldHRpbmdzLmJyb3dzZXJzIHx8XG4gICAgICBjb250ZXh0LnNldHRpbmdzLnRhcmdldHMgfHxcbiAgICAgIGNvbnRleHQub3B0aW9uc1swXTtcblxuICAgIGNvbnN0IGJyb3dzZXJzbGlzdFRhcmdldHMgPSBWZXJzaW9uaW5nKFxuICAgICAgRGV0ZXJtaW5lVGFyZ2V0c0Zyb21Db25maWcoY29udGV4dC5nZXRGaWxlbmFtZSgpLCBicm93c2Vyc2xpc3RDb25maWcpXG4gICAgKTtcblxuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gbGludChub2RlOiBFU0xpbnROb2RlKSB7XG4gICAgICBjb25zdCB7IGlzVmFsaWQsIHJ1bGUsIHVuc3VwcG9ydGVkVGFyZ2V0cyB9ID0gTGludChcbiAgICAgICAgbm9kZSxcbiAgICAgICAgYnJvd3NlcnNsaXN0VGFyZ2V0cyxcbiAgICAgICAgbmV3IFNldChjb250ZXh0LnNldHRpbmdzLnBvbHlmaWxscyB8fCBbXSlcbiAgICAgICk7XG5cbiAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICBtZXNzYWdlOiBbXG4gICAgICAgICAgICBnZW5lcmF0ZUVycm9yTmFtZShydWxlKSxcbiAgICAgICAgICAgICdpcyBub3Qgc3VwcG9ydGVkIGluJyxcbiAgICAgICAgICAgIHVuc3VwcG9ydGVkVGFyZ2V0cy5qb2luKCcsICcpXG4gICAgICAgICAgXS5qb2luKCcgJylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaWRlbnRpZmllcnMgPSBuZXcgU2V0KCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgQ2FsbEV4cHJlc3Npb246IGxpbnQsXG4gICAgICBNZW1iZXJFeHByZXNzaW9uOiBsaW50LFxuICAgICAgTmV3RXhwcmVzc2lvbjogbGludCxcbiAgICAgIC8vIEtlZXAgdHJhY2sgb2YgYWxsIHRoZSBkZWZpbmVkIHZhcmlhYmxlcy4gRG8gbm90IHJlcG9ydCBlcnJvcnMgZm9yIG5vZGVzIHRoYXQgYXJlIG5vdCBkZWZpbmVkXG4gICAgICBJZGVudGlmaWVyKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUucGFyZW50KSB7XG4gICAgICAgICAgY29uc3QgeyB0eXBlIH0gPSBub2RlLnBhcmVudDtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAvLyBleC4gY29uc3QgeyBTZXQgfSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuICAgICAgICAgICAgdHlwZSA9PT0gJ1Byb3BlcnR5JyB8fFxuICAgICAgICAgICAgLy8gZXguIGZ1bmN0aW9uIFNldCgpIHt9XG4gICAgICAgICAgICB0eXBlID09PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicgfHxcbiAgICAgICAgICAgIC8vIGV4LiBjb25zdCBTZXQgPSAoKSA9PiB7fVxuICAgICAgICAgICAgdHlwZSA9PT0gJ1ZhcmlhYmxlRGVjbGFyYXRvcicgfHxcbiAgICAgICAgICAgIC8vIGV4LiBjbGFzcyBTZXQge31cbiAgICAgICAgICAgIHR5cGUgPT09ICdDbGFzc0RlY2xhcmF0aW9uJyB8fFxuICAgICAgICAgICAgLy8gZXguIGltcG9ydCBTZXQgZnJvbSAnc2V0JztcbiAgICAgICAgICAgIHR5cGUgPT09ICdJbXBvcnREZWZhdWx0U3BlY2lmaWVyJyB8fFxuICAgICAgICAgICAgLy8gZXguIGltcG9ydCB7U2V0fSBmcm9tICdzZXQnO1xuICAgICAgICAgICAgdHlwZSA9PT0gJ0ltcG9ydFNwZWNpZmllcicgfHxcbiAgICAgICAgICAgIC8vIGV4LiBpbXBvcnQge1NldH0gZnJvbSAnc2V0JztcbiAgICAgICAgICAgIHR5cGUgPT09ICdJbXBvcnREZWNsYXJhdGlvbidcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXJzLmFkZChub2RlLm5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdQcm9ncmFtOmV4aXQnOiAoKSA9PiB7XG4gICAgICAgIC8vIEdldCBhIG1hcCBvZiBhbGwgdGhlIHZhcmlhYmxlcyBkZWZpbmVkIGluIHRoZSByb290IHNjb3BlIChub3QgdGhlIGdsb2JhbCBzY29wZSlcbiAgICAgICAgLy8gY29uc3QgdmFyaWFibGVzTWFwID0gY29udGV4dC5nZXRTY29wZSgpLmNoaWxkU2NvcGVzLm1hcChlID0+IGUuc2V0KVswXTtcbiAgICAgICAgZXJyb3JzXG4gICAgICAgICAgLmZpbHRlcihlcnJvciA9PiAhaWRlbnRpZmllcnMuaGFzKGdldE5hbWUoZXJyb3Iubm9kZSkpKVxuICAgICAgICAgIC5mb3JFYWNoKG5vZGUgPT4gY29udGV4dC5yZXBvcnQobm9kZSkpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG4iXX0=