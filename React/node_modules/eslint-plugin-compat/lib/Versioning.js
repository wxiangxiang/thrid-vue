"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DetermineTargetsFromConfig;
exports.Versioning = Versioning;

var _browserslist = _interopRequireDefault(require("browserslist"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Determine the targets based on the browserslist config object
 *
 * @param configPath - The file or a directory path to look for the browserslist config file
 */
function DetermineTargetsFromConfig(configPath, config) {
  const browserslistOpts = {
    path: configPath
  };

  if (Array.isArray(config) || typeof config === 'string') {
    return (0, _browserslist.default)(config, browserslistOpts);
  }

  if (config && typeof config === 'object') {
    return (0, _browserslist.default)([...(config.production || []), ...(config.development || [])], browserslistOpts);
  }

  return (0, _browserslist.default)(undefined, browserslistOpts);
}
/**
 * Take a list of targets returned from browserslist api, return the lowest version
 * version of each target
 */


function Versioning(targetslist) {
  return targetslist // Sort the targets by target name and then version number in ascending order
  .map(e => {
    const [target, version] = e.split(' ');
    return {
      target,
      version,
      parsedVersion: version === 'all' ? 0 : version.includes('-') ? parseFloat(version.split('-')[0]) : parseFloat(version)
    };
  }) // Sort the targets by target name and then version number in descending order
  // ex. [a@3, b@3, a@1] => [a@3, a@1, b@3]
  .sort((a, b) => {
    if (b.target === a.target) {
      // If any version === 'all', return 0. The only version of op_mini is 'all'
      // Otherwise, compare the versions
      return typeof b.parsedVersion === 'string' || typeof a.parsedVersion === 'string' ? 0 : b.parsedVersion - a.parsedVersion;
    }

    return b.target > a.target ? 1 : -1;
  }) // First last target always has the latest version
  .filter((e, i, items) => // Check if the current target is the last of its kind. If it is, then it
  // is most recent version
  i + 1 === items.length || e.target !== items[i + 1].target);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9WZXJzaW9uaW5nLmpzIl0sIm5hbWVzIjpbIkRldGVybWluZVRhcmdldHNGcm9tQ29uZmlnIiwiY29uZmlnUGF0aCIsImNvbmZpZyIsImJyb3dzZXJzbGlzdE9wdHMiLCJwYXRoIiwiQXJyYXkiLCJpc0FycmF5IiwicHJvZHVjdGlvbiIsImRldmVsb3BtZW50IiwidW5kZWZpbmVkIiwiVmVyc2lvbmluZyIsInRhcmdldHNsaXN0IiwibWFwIiwiZSIsInRhcmdldCIsInZlcnNpb24iLCJzcGxpdCIsInBhcnNlZFZlcnNpb24iLCJpbmNsdWRlcyIsInBhcnNlRmxvYXQiLCJzb3J0IiwiYSIsImIiLCJmaWx0ZXIiLCJpIiwiaXRlbXMiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0E7Ozs7QUFTQTs7Ozs7QUFLZSxTQUFTQSwwQkFBVCxDQUNiQyxVQURhLEVBRWJDLE1BRmEsRUFHRTtBQUNmLFFBQU1DLGdCQUFnQixHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBRUg7QUFBUixHQUF6Qjs7QUFFQSxNQUFJSSxLQUFLLENBQUNDLE9BQU4sQ0FBY0osTUFBZCxLQUF5QixPQUFPQSxNQUFQLEtBQWtCLFFBQS9DLEVBQXlEO0FBQ3ZELFdBQU8sMkJBQWFBLE1BQWIsRUFBcUJDLGdCQUFyQixDQUFQO0FBQ0Q7O0FBRUQsTUFBSUQsTUFBTSxJQUFJLE9BQU9BLE1BQVAsS0FBa0IsUUFBaEMsRUFBMEM7QUFDeEMsV0FBTywyQkFDTCxDQUFDLElBQUlBLE1BQU0sQ0FBQ0ssVUFBUCxJQUFxQixFQUF6QixDQUFELEVBQStCLElBQUlMLE1BQU0sQ0FBQ00sV0FBUCxJQUFzQixFQUExQixDQUEvQixDQURLLEVBRUxMLGdCQUZLLENBQVA7QUFJRDs7QUFFRCxTQUFPLDJCQUFhTSxTQUFiLEVBQXdCTixnQkFBeEIsQ0FBUDtBQUNEO0FBRUQ7Ozs7OztBQUlPLFNBQVNPLFVBQVQsQ0FBb0JDLFdBQXBCLEVBQXVFO0FBQzVFLFNBQ0VBLFdBQVcsQ0FDVDtBQURTLEdBRVJDLEdBRkgsQ0FHS0MsQ0FBRCxJQUErQjtBQUM3QixVQUFNLENBQUNDLE1BQUQsRUFBU0MsT0FBVCxJQUFvQkYsQ0FBQyxDQUFDRyxLQUFGLENBQVEsR0FBUixDQUExQjtBQUNBLFdBQU87QUFDTEYsTUFBQUEsTUFESztBQUVMQyxNQUFBQSxPQUZLO0FBR0xFLE1BQUFBLGFBQWEsRUFDWEYsT0FBTyxLQUFLLEtBQVosR0FDSSxDQURKLEdBRUlBLE9BQU8sQ0FBQ0csUUFBUixDQUFpQixHQUFqQixJQUNBQyxVQUFVLENBQUNKLE9BQU8sQ0FBQ0MsS0FBUixDQUFjLEdBQWQsRUFBbUIsQ0FBbkIsQ0FBRCxDQURWLEdBRUFHLFVBQVUsQ0FBQ0osT0FBRDtBQVJYLEtBQVA7QUFVRCxHQWZMLEVBaUJFO0FBQ0E7QUFsQkYsR0FtQkdLLElBbkJILENBb0JJLENBQUNDLENBQUQsRUFBb0JDLENBQXBCLEtBQWtEO0FBQ2hELFFBQUlBLENBQUMsQ0FBQ1IsTUFBRixLQUFhTyxDQUFDLENBQUNQLE1BQW5CLEVBQTJCO0FBQ3pCO0FBQ0E7QUFDQSxhQUFPLE9BQU9RLENBQUMsQ0FBQ0wsYUFBVCxLQUEyQixRQUEzQixJQUNMLE9BQU9JLENBQUMsQ0FBQ0osYUFBVCxLQUEyQixRQUR0QixHQUVILENBRkcsR0FHSEssQ0FBQyxDQUFDTCxhQUFGLEdBQWtCSSxDQUFDLENBQUNKLGFBSHhCO0FBSUQ7O0FBQ0QsV0FBT0ssQ0FBQyxDQUFDUixNQUFGLEdBQVdPLENBQUMsQ0FBQ1AsTUFBYixHQUFzQixDQUF0QixHQUEwQixDQUFDLENBQWxDO0FBQ0QsR0E5QkwsRUFnQ0U7QUFoQ0YsR0FpQ0dTLE1BakNILENBa0NJLENBQUNWLENBQUQsRUFBb0JXLENBQXBCLEVBQStCQyxLQUEvQixLQUNFO0FBQ0E7QUFDQUQsRUFBQUEsQ0FBQyxHQUFHLENBQUosS0FBVUMsS0FBSyxDQUFDQyxNQUFoQixJQUEwQmIsQ0FBQyxDQUFDQyxNQUFGLEtBQWFXLEtBQUssQ0FBQ0QsQ0FBQyxHQUFHLENBQUwsQ0FBTCxDQUFhVixNQXJDMUQsQ0FERjtBQXlDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQgYnJvd3NlcnNsaXN0IGZyb20gJ2Jyb3dzZXJzbGlzdCc7XG5pbXBvcnQgdHlwZSB7IEJyb3dzZXJMaXN0Q29uZmlnIH0gZnJvbSAnLi9ydWxlcy9jb21wYXQnO1xuXG50eXBlIFRhcmdldExpc3RJdGVtID0ge1xuICB0YXJnZXQ6IHN0cmluZyxcbiAgcGFyc2VkVmVyc2lvbjogbnVtYmVyLFxuICB2ZXJzaW9uOiBzdHJpbmcgfCAnYWxsJ1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIHRhcmdldHMgYmFzZWQgb24gdGhlIGJyb3dzZXJzbGlzdCBjb25maWcgb2JqZWN0XG4gKlxuICogQHBhcmFtIGNvbmZpZ1BhdGggLSBUaGUgZmlsZSBvciBhIGRpcmVjdG9yeSBwYXRoIHRvIGxvb2sgZm9yIHRoZSBicm93c2Vyc2xpc3QgY29uZmlnIGZpbGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGV0ZXJtaW5lVGFyZ2V0c0Zyb21Db25maWcoXG4gIGNvbmZpZ1BhdGg6IHN0cmluZyxcbiAgY29uZmlnPzogQnJvd3Nlckxpc3RDb25maWdcbik6IEFycmF5PHN0cmluZz4ge1xuICBjb25zdCBicm93c2Vyc2xpc3RPcHRzID0geyBwYXRoOiBjb25maWdQYXRoIH07XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnKSB8fCB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBicm93c2Vyc2xpc3QoY29uZmlnLCBicm93c2Vyc2xpc3RPcHRzKTtcbiAgfVxuXG4gIGlmIChjb25maWcgJiYgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gYnJvd3NlcnNsaXN0KFxuICAgICAgWy4uLihjb25maWcucHJvZHVjdGlvbiB8fCBbXSksIC4uLihjb25maWcuZGV2ZWxvcG1lbnQgfHwgW10pXSxcbiAgICAgIGJyb3dzZXJzbGlzdE9wdHNcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGJyb3dzZXJzbGlzdCh1bmRlZmluZWQsIGJyb3dzZXJzbGlzdE9wdHMpO1xufVxuXG4vKipcbiAqIFRha2UgYSBsaXN0IG9mIHRhcmdldHMgcmV0dXJuZWQgZnJvbSBicm93c2Vyc2xpc3QgYXBpLCByZXR1cm4gdGhlIGxvd2VzdCB2ZXJzaW9uXG4gKiB2ZXJzaW9uIG9mIGVhY2ggdGFyZ2V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBWZXJzaW9uaW5nKHRhcmdldHNsaXN0OiBBcnJheTxzdHJpbmc+KTogQXJyYXk8VGFyZ2V0TGlzdEl0ZW0+IHtcbiAgcmV0dXJuIChcbiAgICB0YXJnZXRzbGlzdFxuICAgICAgLy8gU29ydCB0aGUgdGFyZ2V0cyBieSB0YXJnZXQgbmFtZSBhbmQgdGhlbiB2ZXJzaW9uIG51bWJlciBpbiBhc2NlbmRpbmcgb3JkZXJcbiAgICAgIC5tYXAoXG4gICAgICAgIChlOiBzdHJpbmcpOiBUYXJnZXRMaXN0SXRlbSA9PiB7XG4gICAgICAgICAgY29uc3QgW3RhcmdldCwgdmVyc2lvbl0gPSBlLnNwbGl0KCcgJyk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHZlcnNpb24sXG4gICAgICAgICAgICBwYXJzZWRWZXJzaW9uOlxuICAgICAgICAgICAgICB2ZXJzaW9uID09PSAnYWxsJ1xuICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgIDogdmVyc2lvbi5pbmNsdWRlcygnLScpXG4gICAgICAgICAgICAgICAgPyBwYXJzZUZsb2F0KHZlcnNpb24uc3BsaXQoJy0nKVswXSlcbiAgICAgICAgICAgICAgICA6IHBhcnNlRmxvYXQodmVyc2lvbilcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICApXG4gICAgICAvLyBTb3J0IHRoZSB0YXJnZXRzIGJ5IHRhcmdldCBuYW1lIGFuZCB0aGVuIHZlcnNpb24gbnVtYmVyIGluIGRlc2NlbmRpbmcgb3JkZXJcbiAgICAgIC8vIGV4LiBbYUAzLCBiQDMsIGFAMV0gPT4gW2FAMywgYUAxLCBiQDNdXG4gICAgICAuc29ydChcbiAgICAgICAgKGE6IFRhcmdldExpc3RJdGVtLCBiOiBUYXJnZXRMaXN0SXRlbSk6IG51bWJlciA9PiB7XG4gICAgICAgICAgaWYgKGIudGFyZ2V0ID09PSBhLnRhcmdldCkge1xuICAgICAgICAgICAgLy8gSWYgYW55IHZlcnNpb24gPT09ICdhbGwnLCByZXR1cm4gMC4gVGhlIG9ubHkgdmVyc2lvbiBvZiBvcF9taW5pIGlzICdhbGwnXG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIGNvbXBhcmUgdGhlIHZlcnNpb25zXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGIucGFyc2VkVmVyc2lvbiA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgdHlwZW9mIGEucGFyc2VkVmVyc2lvbiA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgIDogYi5wYXJzZWRWZXJzaW9uIC0gYS5wYXJzZWRWZXJzaW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYi50YXJnZXQgPiBhLnRhcmdldCA/IDEgOiAtMTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICAgLy8gRmlyc3QgbGFzdCB0YXJnZXQgYWx3YXlzIGhhcyB0aGUgbGF0ZXN0IHZlcnNpb25cbiAgICAgIC5maWx0ZXIoXG4gICAgICAgIChlOiBUYXJnZXRMaXN0SXRlbSwgaTogbnVtYmVyLCBpdGVtczogQXJyYXk8VGFyZ2V0TGlzdEl0ZW0+KTogYm9vbGVhbiA9PlxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHRhcmdldCBpcyB0aGUgbGFzdCBvZiBpdHMga2luZC4gSWYgaXQgaXMsIHRoZW4gaXRcbiAgICAgICAgICAvLyBpcyBtb3N0IHJlY2VudCB2ZXJzaW9uXG4gICAgICAgICAgaSArIDEgPT09IGl0ZW1zLmxlbmd0aCB8fCBlLnRhcmdldCAhPT0gaXRlbXNbaSArIDFdLnRhcmdldFxuICAgICAgKVxuICApO1xufVxuIl19